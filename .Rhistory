shiny::runApp()
rm(list=ls())
library(xml2)
library(rvest)
library(jsonlite)
fuelly <- html_session("https://www.fuelly.com/login")
login <- fuelly %>% html_node ("form") %>%
html_form() %>%
set_values(
email = "kenbury1@gmail.com",
password = "poopsy"
)
logged_in <- fuelly %>% submit_form(login)
cars_url <- html_nodes(logged_in,".dashboard-vehicle") %>% html_attr("data-clickable")
cars_name <- html_nodes(logged_in,"h3.dashboard-vehicle-name") %>% html_text()
library(plotly)
install.packages("plotly")
library(plotly)
car_plot <- ggplot(df_car_data, aes(x = fuelup_date, y = mpg)) +  geom_ribbon(aes(ymin = ma - sd, ymax = ma + sd)) + geom_point() + geom_line(aes(y = ma), color = "blue")
library(ggplot2)
rm(list=ls())
library(xml2)
library(rvest)
library(jsonlite)
fuelly <- html_session("https://www.fuelly.com/login")
login <- fuelly %>% html_node ("form") %>%
html_form() %>%
set_values(
email = "kenbury1@gmail.com",
password = "poopsy"
)
logged_in <- fuelly %>% submit_form(login)
cars_url <- html_nodes(logged_in,".dashboard-vehicle") %>% html_attr("data-clickable")
cars_name <- html_nodes(logged_in,"h3.dashboard-vehicle-name") %>% html_text()
# select from cars_name to pick the car page to go to
car_page <- logged_in %>% jump_to(cars_url[2])
car_export <- car_page %>% jump_to(paste0(cars_url[2],"/export/fuelups"))
# this is nice but I seem to loose control after export button
car_chart <- car_page %>% jump_to(paste0(cars_url[2],"/fuelchart"))
car_data <- html_node(car_chart,"div#highchart-alltime-fuelups") %>% html_attr("data-fuelupdata")
df_car_data <- fromJSON(car_data)
df_car_data <- df_car_data$series
library(lubridate)
df_car_data$fuelup_date <- df_car_data$fuelup_date <- ymd_hms(df_car_data$fuelup_date,tz= "EST")
df_car_data$mpg <- df_car_data$mpg <- as.numeric(df_car_data$mpg)
library(zoo)
df_car_data$ma <- rollapply(df_car_data$mpg, 5, mean, fill = NA, align = "right")
df_car_data$sd <- rollapply(df_car_data$mpg, 5, sd, fill = NA, align = "right")
library(ggplot2)
library(plotly)
car_plot <- ggplot(df_car_data, aes(x = fuelup_date, y = mpg)) +  geom_ribbon(aes(ymin = ma - sd, ymax = ma + sd)) + geom_point() + geom_line(aes(y = ma), color = "blue")
ggplotly(car_plot)
rm(list=ls())
library(xml2)
library(rvest)
library(jsonlite)
fuelly <- html_session("https://www.fuelly.com/login")
login <- fuelly %>% html_node ("form") %>%
html_form() %>%
set_values(
email = "kenbury1@gmail.com",
password = "poopsy"
)
logged_in <- fuelly %>% submit_form(login)
cars_url <- html_nodes(logged_in,".dashboard-vehicle") %>% html_attr("data-clickable")
cars_name <- html_nodes(logged_in,"h3.dashboard-vehicle-name") %>% html_text()
car_page <- logged_in %>% jump_to(cars_url[2])
# select from cars_name to pick the car page to go to
car_export <- car_page %>% jump_to(paste0(cars_url[2],"/export/fuelups"))
# this is nice but I seem to loose control after export button
car_chart <- car_page %>% jump_to(paste0(cars_url[2],"/fuelchart"))
car_data <- html_node(car_chart,"div#highchart-alltime-fuelups") %>% html_attr("data-fuelupdata")
df_car_data <- fromJSON(car_data)
df_car_data <- df_car_data$series
library(lubridate)
df_car_data$fuelup_date <- df_car_data$fuelup_date <- ymd_hms(df_car_data$fuelup_date,tz= "EST")
df_car_data$mpg <- df_car_data$mpg <- as.numeric(df_car_data$mpg)
library(zoo)
df_car_data$ma <- rollapply(df_car_data$mpg, 5, mean, fill = NA, align = "right")
df_car_data$sd <- rollapply(df_car_data$mpg, 5, sd, fill = NA, align = "right")
library(ggplot2)
library(plotly)
install.packages(c("colorspace", "ggplot2", "scales", "shiny", "XML"))
rm(list=ls())
library(rvest)
library(xml2)
library(jsonlite)
fuelly <- html_session("https://www.fuelly.com/login")
login <- fuelly %>% html_node ("form") %>%
html_form() %>%
set_values(
email = "kenbury1@gmail.com",
password = "poopsy"
)
logged_in <- fuelly %>% submit_form(login)
cars_url <- html_nodes(logged_in,".dashboard-vehicle") %>% html_attr("data-clickable")
cars_name <- html_nodes(logged_in,"h3.dashboard-vehicle-name") %>% html_text()
# select from cars_name to pick the car page to go to
car_page <- logged_in %>% jump_to(cars_url[2])
car_export <- car_page %>% jump_to(paste0(cars_url[2],"/export/fuelups"))
# this is nice but I seem to loose control after export button
car_chart <- car_page %>% jump_to(paste0(cars_url[2],"/fuelchart"))
car_data <- html_node(car_chart,"div#highchart-alltime-fuelups") %>% html_attr("data-fuelupdata")
df_car_data <- fromJSON(car_data)
df_car_data <- df_car_data$series
library(lubridate)
df_car_data$fuelup_date <- df_car_data$fuelup_date <- ymd_hms(df_car_data$fuelup_date,tz= "EST")
df_car_data$mpg <- df_car_data$mpg <- as.numeric(df_car_data$mpg)
library(zoo)
df_car_data$ma <- rollapply(df_car_data$mpg, 5, mean, fill = NA, align = "right")
df_car_data$sd <- rollapply(df_car_data$mpg, 5, sd, fill = NA, align = "right")
library(ggplot2)
library(plotly)
car_plot <- ggplot(df_car_data, aes(x = fuelup_date, y = mpg)) +  geom_ribbon(aes(ymin = ma - sd, ymax = ma + sd)) + geom_point() + geom_line(aes(y = ma), color = "blue")
ggplotly(car_plot)
rm(list=ls())
library(xml2)
library(rvest)
library(jsonlite)
fuelly <- html_session("https://www.fuelly.com/login")
login <- fuelly %>% html_node ("form") %>%
html_form() %>%
set_values(
email = "kenbury1@gmail.com",
password = "poopsy"
)
logged_in <- fuelly %>% submit_form(login)
cars_url <- html_nodes(logged_in,".dashboard-vehicle") %>% html_attr("data-clickable")
cars_name <- html_nodes(logged_in,"h3.dashboard-vehicle-name") %>% html_text()
# select from cars_name to pick the car page to go to
car_page <- logged_in %>% jump_to(cars_url[2])
car_export <- car_page %>% jump_to(paste0(cars_url[2],"/export/fuelups"))
# this is nice but I seem to loose control after export button
car_chart <- car_page %>% jump_to(paste0(cars_url[2],"/fuelchart"))
car_data <- html_node(car_chart,"div#highchart-alltime-fuelups") %>% html_attr("data-fuelupdata")
df_car_data <- fromJSON(car_data)
df_car_data <- df_car_data$series
library(lubridate)
df_car_data$fuelup_date <- df_car_data$fuelup_date <- ymd_hms(df_car_data$fuelup_date,tz= "EST")
df_car_data$mpg <- df_car_data$mpg <- as.numeric(df_car_data$mpg)
library(zoo)
df_car_data$ma <- rollapply(df_car_data$mpg, 5, mean, fill = NA, align = "right")
df_car_data$sd <- rollapply(df_car_data$mpg, 5, sd, fill = NA, align = "right")
library(ggplot2)
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
rm(list=ls())
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages(c("colorspace", "Rcpp"))
shiny::runApp()
install.packages("Rcpp")
install.packages("Rcpp")
shiny::runApp()
install.packages("Rcpp")
library(shiny)
library(shinydashboard)
library(xml2)
library(rvest)
library(jsonlite)
library(lubridate)
library(ggplot2)
library(plotly)
install.packages("ggplot2")
install.packages("colorspace")
install.packages(c("colorspace", "Rcpp"))
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
shiny::runApp()
